import pandas as pd
import numpy as np

def _processar_dados(dados_export, dados_import, tipo):
    """Fun√ß√£o auxiliar para processar dados de exporta√ß√£o e importa√ß√£o."""

    if not dados_export and not dados_import:
        return pd.DataFrame(), f"Erro: Nenhum dado foi encontrado para {tipo}."

    df_export = pd.DataFrame(dados_export) if dados_export else pd.DataFrame()
    df_import = pd.DataFrame(dados_import) if dados_import else pd.DataFrame()

    if not df_export.empty:
        df_export.rename(columns={'metricFOB': 'Exporta√ß√µes (FOB)', 'metricKG': 'Exporta√ß√µes (KG)'}, inplace=True)

    if not df_import.empty:
        df_import.rename(columns={
            'metricFOB': 'Importa√ß√µes (FOB)',
            'metricFreight': 'Importa√ß√µes (Frete USD)',
            'metricInsurance': 'Importa√ß√µes (Seguro USD)',
            'metricCIF': 'Importa√ß√µes (CIF USD)',
            'metricKG': 'Importa√ß√µes (KG)'
        }, inplace=True)

    if not df_export.empty and not df_import.empty:
        df_combined = pd.merge(df_export, df_import, on='year', how='outer')
    elif not df_export.empty:
        df_combined = df_export.copy()
        df_combined['Importa√ß√µes (FOB)'] = 0
        df_combined['Importa√ß√µes (KG)'] = 0
    elif not df_import.empty:
        df_combined = df_import.copy()
        df_combined['Exporta√ß√µes (FOB)'] = 0
        df_combined['Exporta√ß√µes (KG)'] = 0
    else:
        return pd.DataFrame(), f"Erro: Nenhum dado v√°lido para combinar para {tipo}."

    # üîå Convers√£o das colunas num√©ricas
    colunas_numericas = ['Exporta√ß√µes (FOB)', 'Exporta√ß√µes (KG)', 'Importa√ß√µes (FOB)',
                        'Importa√ß√µes (Frete USD)', 'Importa√ß√µes (Seguro USD)',
                        'Importa√ß√µes (CIF USD)', 'Importa√ß√µes (KG)']

    for coluna in colunas_numericas:
        if coluna in df_combined.columns:
            df_combined[coluna] = pd.to_numeric(df_combined[coluna], errors='coerce').fillna(0)

    df_combined['Balan√ßa Comercial (FOB)'] = df_combined['Exporta√ß√µes (FOB)'] - df_combined['Importa√ß√µes (FOB)']
    df_combined['Balan√ßa Comercial (KG)'] = df_combined['Exporta√ß√µes (KG)'] - df_combined['Importa√ß√µes (KG)']

    df_combined['Pre√ßo M√©dio Exporta√ß√£o (US$ FOB/Ton)'] = np.nan_to_num(
        df_combined['Exporta√ß√µes (FOB)'] / (df_combined['Exporta√ß√µes (KG)'] / 1000),
        nan=0.0, posinf=0.0, neginf=0.0
    )

    df_combined['Pre√ßo M√©dio Importa√ß√£o (US$ FOB/Ton)'] = np.nan_to_num(
        df_combined['Importa√ß√µes (FOB)'] / (df_combined['Importa√ß√µes (KG)'] / 1000),
        nan=0.0, posinf=0.0, neginf=0.0
    )

    df_combined.fillna(0, inplace=True)
    return df_combined, None

def processar_dados_export_import(dados_export, dados_import, last_updated_month):
    """
    Processa os dados de exporta√ß√£o e importa√ß√£o de 2025 e calcula m√©tricas adicionais.

    Args:
        dados_export (list): Lista de dicion√°rios com os dados de exporta√ß√£o.
        dados_import (list): Lista de dicion√°rios com os dados de importa√ß√£o.
        last_updated_month (int): N√∫mero do √∫ltimo m√™s atualizado.

    Returns:
        tuple: Uma tupla contendo (df_combined, error). 'df_combined' √© um DataFrame
               com os dados processados, e 'error' √© uma string com a mensagem de
               erro ou None se n√£o houver erro.
    """
    df_combined, error = _processar_dados(dados_export, dados_import, "2025")
    if error:
        return df_combined, error
    df_combined['year'] = df_combined['year'].astype(str)
    df_combined['year'] = df_combined['year'].replace('2025', f"2025 (At√© m√™s {str(last_updated_month).zfill(2)})")

    return df_combined, None

def processar_dados_ano_anterior(dados_export, dados_import, last_updated_month):
    """
    Processa os dados acumulados de 2024 at√© o √∫ltimo m√™s dispon√≠vel para compara√ß√£o com 2025.

    Args:
        dados_export (list): Lista de dicion√°rios com os dados de exporta√ß√£o.
        dados_import (list): Lista de dicion√°rios com os dados de importa√ß√£o.
        last_updated_month (int): N√∫mero do √∫ltimo m√™s atualizado.

    Returns:
        tuple: Uma tupla contendo (df_combined, error). 'df_combined' √© um DataFrame
               com os dados processados, e 'error' √© uma string com a mensagem de
               erro ou None se n√£o houver erro.
    """
    df_combined, error = _processar_dados(dados_export, dados_import, "2024")

    if error:
        return df_combined, error

    df_combined['year'] = df_combined['year'].astype(str)
    df_combined['year'] = df_combined['year'].replace('2024', f"2024 (At√© m√™s {str(last_updated_month).zfill(2)})")

    return df_combined, None

def processar_dados_ano_atual(dados_export, dados_import, last_updated_month):
    """
    Processa os dados acumulados de 2025 at√© o √∫ltimo m√™s dispon√≠vel.

    Args:
        dados_export (list): Lista de dicion√°rios com os dados de exporta√ß√£o.
        dados_import (list): Lista de dicion√°rios com os dados de importa√ß√£o.
        last_updated_month (int): N√∫mero do √∫ltimo m√™s atualizado.

    Returns:
        tuple: Uma tupla contendo (df_combined, error). 'df_combined' √© um DataFrame
               com os dados processados, e 'error' √© uma string com a mensagem de
               erro ou None se n√£o houver erro.
    """
    df_combined, error = _processar_dados(dados_export, dados_import, "2025")

    if error:
        return df_combined, error

    df_combined['year'] = df_combined['year'].astype(str)
    df_combined['year'] = df_combined['year'].replace('2025', f"2025 (At√© m√™s {str(last_updated_month).zfill(2)})")

    return df_combined, None





